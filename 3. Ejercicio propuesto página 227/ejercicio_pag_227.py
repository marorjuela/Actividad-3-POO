# -*- coding: utf-8 -*-
"""Ejercicio Pag 227.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nHh_QxWBvQ1QIUhJznhc7IOqNx1uhr_M
"""

from abc import ABC, abstractmethod

class Mascota(ABC):
    """
    Clase base abstracta para todas las mascotas.
    Define atributos comunes como nombre, edad y color.
    """
    def __init__(self, nombre: str, edad: int, color: str):
        self._nombre = nombre
        self._edad = edad
        self._color = color

    def get_nombre(self) -> str:
        return self._nombre

    def get_edad(self) -> int:
        return self._edad

    def get_color(self) -> str:
        return self._color

    def set_nombre(self, n: str):
        self._nombre = n

    def set_edad(self, e: int):
        self._edad = e

    def set_color(self, c: str):
        self._color = c

    def __str__(self) -> str:
        return f"Nombre: {self._nombre}, Edad: {self._edad} años, Color: {self._color}"

class Perro(Mascota, ABC):
    """
    Clase abstracta para perros. Hereda de Mascota.
    Atributos adicionales: peso, muerde (booleano).
    Método estático: sonido().
    """
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color)
        self._peso = peso
        self._muerde = muerde


    def get_peso(self) -> float:
        return self._peso

    def is_muerde(self) -> bool:
        return self._muerde

    def set_peso(self, p: float):
        self._peso = p

    def set_muerde(self, m: bool):
        self._muerde = m

    @staticmethod
    def sonido():
        """Método estático que imprime el sonido de los perros."""
        print("Los perros ladran")

    def __str__(self) -> str:
        return f"Perro ({super().__str__()}), Peso: {self._peso} kg, ¿Muerde?: {'Sí' if self._muerde else 'No'}"

class Gato(Mascota, ABC):
    """
    Clase abstracta para gatos. Hereda de Mascota.
    Atributos adicionales: alturaSalto, longitudSalto.
    Método estático: sonido().
    """
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color)
        self._altura_salto = altura_salto
        self._longitud_salto = longitud_salto

    def get_altura_salto(self) -> float:
        return self._altura_salto

    def get_longitud_salto(self) -> float:
        return self._longitud_salto

    def set_altura_salto(self, a: float):
        self._altura_salto = a

    def set_longitud_salto(self, l: float):
        self._longitud_salto = l

    @staticmethod
    def sonido():
        """Método estático que imprime el sonido de los gatos."""
        print("Los gatos maúllan y ronronean")

    def __str__(self) -> str:
        return f"Gato ({super().__str__()}), Altura Salto: {self._altura_salto} m, Longitud Salto: {self._longitud_salto} m"


class PerroPequeno(Perro, ABC):
    """
    Clase abstracta para perros pequeños. Hereda de Perro.
    """
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Perro Pequeño ({super().__str__()})"

class PerroMediano(Perro, ABC):
    """
    Clase abstracta para perros medianos. Hereda de Perro.
    """
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Perro Mediano ({super().__str__()})"

class PerroGrande(Perro, ABC):
    """
    Clase abstracta para perros grandes. Hereda de Perro.
    """
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Perro Grande ({super().__str__()})"

class Caniche(PerroPequeno):
    """Clase concreta para la raza Caniche."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Caniche ({super().__str__()})"

class YorkshireTerrier(PerroPequeno):
    """Clase concreta para la raza Yorkshire Terrier."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Yorkshire Terrier ({super().__str__()})"

class Schnauzer(PerroPequeno):
    """Clase concreta para la raza Schnauzer."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Schnauzer ({super().__str__()})"

class Chihuahua(PerroPequeno):
    """Clase concreta para la raza Chihuahua."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Chihuahua ({super().__str__()})"

class Collie(PerroMediano):
    """Clase concreta para la raza Collie."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Collie ({super().__str__()})"

class Dalmata(PerroMediano):
    """Clase concreta para la raza Dálmata."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Dálmata ({super().__str__()})"

class Bulldog(PerroMediano):
    """Clase concreta para la raza Bulldog."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Bulldog ({super().__str__()})"

class Galgo(PerroMediano):
    """Clase concreta para la raza Galgo."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Galgo ({super().__str__()})"

class Sabueso(PerroMediano):
    """Clase concreta para la raza Sabueso."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Sabueso ({super().__str__()})"

class PastorAleman(PerroGrande):
    """Clase concreta para la raza Pastor Alemán."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Pastor Alemán ({super().__str__()})"

class Doberman(PerroGrande):
    """Clase concreta para la raza Doberman."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Doberman ({super().__str__()})"

class Rottweiler(PerroGrande):
    """Clase concreta para la raza Rottweiler."""
    def __init__(self, nombre: str, edad: int, color: str, peso: float, muerde: bool):
        super().__init__(nombre, edad, color, peso, muerde)

    def __str__(self) -> str:
        return f"Rottweiler ({super().__str__()})"

class GatoSinPelo(Gato, ABC):
    """
    Clase abstracta para gatos sin pelo. Hereda de Gato.
    """
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Gato Sin Pelo ({super().__str__()})"

class GatoPeloLargo(Gato, ABC):
    """
    Clase abstracta para gatos de pelo largo. Hereda de Gato.
    """
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Gato Pelo Largo ({super().__str__()})"

class GatoPeloCorto(Gato, ABC):
    """
    Clase abstracta para gatos de pelo corto. Hereda de Gato.
    """
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Gato Pelo Corto ({super().__str__()})"

class Esfinge(GatoSinPelo):
    """Clase concreta para la raza Esfinge."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Esfinge ({super().__str__()})"

class Elfo(GatoSinPelo):
    """Clase concreta para la raza Elfo."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Elfo ({super().__str__()})"

class Donskoy(GatoSinPelo):
    """Clase concreta para la raza Donskoy."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Donskoy ({super().__str__()})"

class Angora(GatoPeloLargo):
    """Clase concreta para la raza Angora."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Angora ({super().__str__()})"

class Himalayo(GatoPeloLargo):
    """Clase concreta para la raza Himalayo."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Himalayo ({super().__str__()})"

class Balines(GatoPeloLargo):
    """Clase concreta para la raza Balinés."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Balinés ({super().__str__()})"

class Somali(GatoPeloLargo):
    """Clase concreta para la raza Somali."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Somalí ({super().__str__()})"

class AzulRuso(GatoPeloCorto):
    """Clase concreta para la raza Azul Ruso."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Azul Ruso ({super().__str__()})"

class Britanico(GatoPeloCorto):
    """Clase concreta para la raza Británico."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Británico ({super().__str__()})"

class Manx(GatoPeloCorto):
    """Clase concreta para la raza Manx."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Manx ({super().__str__()})"

class DevonRex(GatoPeloCorto):
    """Clase concreta para la raza Devon Rex."""
    def __init__(self, nombre: str, edad: int, color: str, altura_salto: float, longitud_salto: float):
        super().__init__(nombre, edad, color, altura_salto, longitud_salto)

    def __str__(self) -> str:
        return f"Devon Rex ({super().__str__()})"

if __name__ == "__main__":
    print("- Bienvenida a la Tienda de Mascotas -")

    print("\n- Perros Disponibles -")

    perro_pequeno_1 = Caniche("Max", 4, "blanco", 6.5, False)
    perro_pequeno_2 = Chihuahua("Luna", 2, "crema", 2.8, True)

    perro_mediano_1 = Dalmata("Spot", 3, "blanco y negro", 22.0, False)
    perro_mediano_2 = Bulldog("Rocky", 5, "marrón", 28.5, True)

    perro_grande_1 = PastorAleman("Rex", 6, "negro y marrón", 38.0, True)
    perro_grande_2 = Rottweiler("Killer", 4, "negro", 45.0, True)

    perros_en_tienda = [
        perro_pequeno_1, perro_pequeno_2,
        perro_mediano_1, perro_mediano_2,
        perro_grande_1, perro_grande_2
    ]

    for perro in perros_en_tienda:
        print("\n" + str(perro))
        print(f"Tipo: {perro.__class__.__name__}")
        print(f"¿Muerde?: {'Sí' if perro.is_muerde() else 'No'}")
        Perro.sonido()

    print("\n- Gatos Disponibles -")

    gato_sin_pelo_1 = Esfinge("Anubis", 5, "beige", 1.2, 1.8)
    gato_sin_pelo_2 = Donskoy("Dobby", 1, "gris", 1.0, 1.5)

    gato_pelo_largo_1 = Angora("Nieve", 3, "blanco", 1.7, 2.5)
    gato_pelo_largo_2 = Himalayo("Simba", 7, "naranja y crema", 1.6, 2.3)

    gato_pelo_corto_1 = AzulRuso("Smoky", 4, "gris azulado", 1.5, 2.0)
    gato_pelo_corto_2 = Britanico("Lord", 2, "azul", 1.4, 1.9)

    gatos_en_tienda = [
        gato_sin_pelo_1, gato_sin_pelo_2,
        gato_pelo_largo_1, gato_pelo_largo_2,
        gato_pelo_corto_1, gato_pelo_corto_2
    ]

    for gato in gatos_en_tienda:
        print("\n" + str(gato))
        print(f"Tipo: {gato.__class__.__name__}")
        print(f"Longitud de Salto: {gato.get_longitud_salto()} metros")
        Gato.sonido()
    print("\n- Fin. ¡Gracias por visitar la tienda! -")